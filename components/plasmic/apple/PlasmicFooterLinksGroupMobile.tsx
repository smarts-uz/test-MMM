// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wtHXqYo4cHDw1QkkqeK42j
// Component: OwSLeRN_L328

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import AnimatingCross from "../../AnimatingCross"; // plasmic-import: haA0hbHhqrE8/component
import FooterLink from "../../FooterLink"; // plasmic-import: A3mK7fgxYkXc/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: wtHXqYo4cHDw1QkkqeK42j/projectcss
import sty from "./PlasmicFooterLinksGroupMobile.module.css"; // plasmic-import: OwSLeRN_L328/css

createPlasmicElementProxy;

export type PlasmicFooterLinksGroupMobile__VariantMembers = {
  expanded: "expanded";
};
export type PlasmicFooterLinksGroupMobile__VariantsArgs = {
  expanded?: SingleBooleanChoiceArg<"expanded">;
};
type VariantPropType = keyof PlasmicFooterLinksGroupMobile__VariantsArgs;
export const PlasmicFooterLinksGroupMobile__VariantProps =
  new Array<VariantPropType>("expanded");

export type PlasmicFooterLinksGroupMobile__ArgsType = {
  groupName?: React.ReactNode;
  links?: any;
};
type ArgPropType = keyof PlasmicFooterLinksGroupMobile__ArgsType;
export const PlasmicFooterLinksGroupMobile__ArgProps = new Array<ArgPropType>(
  "groupName",
  "links"
);

export type PlasmicFooterLinksGroupMobile__OverridesType = {
  root?: Flex__<"div">;
  categoryNameContainer?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  animatingCross?: Flex__<typeof AnimatingCross>;
  linksList?: Flex__<"div">;
  footerLink?: Flex__<typeof FooterLink>;
};

export interface DefaultFooterLinksGroupMobileProps {
  groupName?: React.ReactNode;
  links?: any;
  expanded?: SingleBooleanChoiceArg<"expanded">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooterLinksGroupMobile__RenderFunc(props: {
  variants: PlasmicFooterLinksGroupMobile__VariantsArgs;
  args: PlasmicFooterLinksGroupMobile__ArgsType;
  overrides: PlasmicFooterLinksGroupMobile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          links: [{ url: "#", label: "Hello" }]
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "expanded",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.isOpen;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.expanded
      },
      {
        path: "isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootexpanded]: hasVariant($state, "expanded", "expanded") }
      )}
      onClick={async event => {
        const $steps = {};

        $steps["toggle"] = true
          ? (() => {
              const actionArgs = {
                variable: {
                  objRoot: $state,
                  variablePath: ["isOpen"]
                },
                operation: 0,
                value: !$state.isOpen
              };
              return (({ variable, value, startIndex, deleteCount }) => {
                if (!variable) {
                  return;
                }
                const { objRoot, variablePath } = variable;

                $stateSet(objRoot, variablePath, value);
                return value;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["toggle"] != null &&
          typeof $steps["toggle"] === "object" &&
          typeof $steps["toggle"].then === "function"
        ) {
          $steps["toggle"] = await $steps["toggle"];
        }
      }}
    >
      <div
        data-plasmic-name={"categoryNameContainer"}
        data-plasmic-override={overrides.categoryNameContainer}
        className={classNames(projectcss.all, sty.categoryNameContainer)}
      >
        {renderPlasmicSlot({
          defaultContents: "Enter some text",
          value: args.groupName,
          className: classNames(sty.slotTargetGroupName)
        })}
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <AnimatingCross
            data-plasmic-name={"animatingCross"}
            data-plasmic-override={overrides.animatingCross}
            add={hasVariant($state, "expanded", "expanded") ? undefined : true}
            className={classNames("__wab_instance", sty.animatingCross, {
              [sty.animatingCrossexpanded]: hasVariant(
                $state,
                "expanded",
                "expanded"
              )
            })}
          />
        </div>
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"linksList"}
        data-plasmic-override={overrides.linksList}
        hasGap={true}
        className={classNames(projectcss.all, sty.linksList, {
          [sty.linksListexpanded]: hasVariant($state, "expanded", "expanded")
        })}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.links;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <FooterLink
              data-plasmic-name={"footerLink"}
              data-plasmic-override={overrides.footerLink}
              className={classNames("__wab_instance", sty.footerLink)}
              key={currentIndex}
              label={(() => {
                try {
                  return currentItem.label;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              url={(() => {
                try {
                  return currentItem.url;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          );
        })}
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "categoryNameContainer",
    "freeBox",
    "animatingCross",
    "linksList",
    "footerLink"
  ],
  categoryNameContainer: ["categoryNameContainer", "freeBox", "animatingCross"],
  freeBox: ["freeBox", "animatingCross"],
  animatingCross: ["animatingCross"],
  linksList: ["linksList", "footerLink"],
  footerLink: ["footerLink"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  categoryNameContainer: "div";
  freeBox: "div";
  animatingCross: typeof AnimatingCross;
  linksList: "div";
  footerLink: typeof FooterLink;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooterLinksGroupMobile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooterLinksGroupMobile__VariantsArgs;
    args?: PlasmicFooterLinksGroupMobile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooterLinksGroupMobile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooterLinksGroupMobile__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooterLinksGroupMobile__ArgProps,
          internalVariantPropNames: PlasmicFooterLinksGroupMobile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooterLinksGroupMobile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterLinksGroupMobile";
  } else {
    func.displayName = `PlasmicFooterLinksGroupMobile.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterLinksGroupMobile = Object.assign(
  // Top-level PlasmicFooterLinksGroupMobile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    categoryNameContainer: makeNodeComponent("categoryNameContainer"),
    freeBox: makeNodeComponent("freeBox"),
    animatingCross: makeNodeComponent("animatingCross"),
    linksList: makeNodeComponent("linksList"),
    footerLink: makeNodeComponent("footerLink"),

    // Metadata about props expected for PlasmicFooterLinksGroupMobile
    internalVariantProps: PlasmicFooterLinksGroupMobile__VariantProps,
    internalArgProps: PlasmicFooterLinksGroupMobile__ArgProps
  }
);

export default PlasmicFooterLinksGroupMobile;
/* prettier-ignore-end */
