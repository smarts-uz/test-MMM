// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wtHXqYo4cHDw1QkkqeK42j
// Component: 3cOksGmh6ZLL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: wtHXqYo4cHDw1QkkqeK42j/projectcss
import sty from "./PlasmicButton.module.css"; // plasmic-import: 3cOksGmh6ZLL/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: sreT60sA2AHI/icon

createPlasmicElementProxy;

export type PlasmicButton__VariantMembers = {
  type: "_default" | "link";
  withIcons: "withSuffixIcon" | "withPrefixIcon";
  size: "large" | "small";
  rounded: "rounded";
  bold: "bold";
};
export type PlasmicButton__VariantsArgs = {
  type?: SingleChoiceArg<"_default" | "link">;
  withIcons?: MultiChoiceArg<"withSuffixIcon" | "withPrefixIcon">;
  size?: SingleChoiceArg<"large" | "small">;
  rounded?: SingleBooleanChoiceArg<"rounded">;
  bold?: SingleBooleanChoiceArg<"bold">;
};
type VariantPropType = keyof PlasmicButton__VariantsArgs;
export const PlasmicButton__VariantProps = new Array<VariantPropType>(
  "type",
  "withIcons",
  "size",
  "rounded",
  "bold"
);

export type PlasmicButton__ArgsType = {
  text?: React.ReactNode;
  iconLeft?: React.ReactNode;
};
type ArgPropType = keyof PlasmicButton__ArgsType;
export const PlasmicButton__ArgProps = new Array<ArgPropType>(
  "text",
  "iconLeft"
);

export type PlasmicButton__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  iconRightsvgXmlnshttpwwww3Org2000SvgWidth21Height21ViewBox002121GFillnoneFillRuleevenoddStrokecurrentColorStrokeLinecaproundStrokeLinejoinroundcircleCx85Cy85R5PathDM17571175L1212Gsvg?: Flex__<"svg">;
};

export interface DefaultButtonProps {
  text?: React.ReactNode;
  iconLeft?: React.ReactNode;
  type?: SingleChoiceArg<"_default" | "link">;
  withIcons?: MultiChoiceArg<"withSuffixIcon" | "withPrefixIcon">;
  size?: SingleChoiceArg<"large" | "small">;
  rounded?: SingleBooleanChoiceArg<"rounded">;
  bold?: SingleBooleanChoiceArg<"bold">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicButton__RenderFunc(props: {
  variants: PlasmicButton__VariantsArgs;
  args: PlasmicButton__ArgsType;
  overrides: PlasmicButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      },
      {
        path: "withIcons",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withIcons
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "rounded",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.rounded
      },
      {
        path: "bold",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.bold
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootrounded]: hasVariant($state, "rounded", "rounded"),
          [sty.rootsize_large]: hasVariant($state, "size", "large"),
          [sty.roottype__default]: hasVariant($state, "type", "_default"),
          [sty.roottype_link]: hasVariant($state, "type", "link"),
          [sty.roottype_link_size_large]:
            hasVariant($state, "type", "link") &&
            hasVariant($state, "size", "large")
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <IconIcon
          data-plasmic-name={
            "iconRightsvgXmlnshttpwwww3Org2000SvgWidth21Height21ViewBox002121GFillnoneFillRuleevenoddStrokecurrentColorStrokeLinecaproundStrokeLinejoinroundcircleCx85Cy85R5PathDM17571175L1212Gsvg"
          }
          data-plasmic-override={
            overrides.iconRightsvgXmlnshttpwwww3Org2000SvgWidth21Height21ViewBox002121GFillnoneFillRuleevenoddStrokecurrentColorStrokeLinecaproundStrokeLinejoinroundcircleCx85Cy85R5PathDM17571175L1212Gsvg
          }
          className={classNames(
            projectcss.all,
            sty.iconRightsvgXmlnshttpwwww3Org2000SvgWidth21Height21ViewBox002121GFillnoneFillRuleevenoddStrokecurrentColorStrokeLinecaproundStrokeLinejoinroundcircleCx85Cy85R5PathDm17571175L1212Gsvg,
            {
              [sty.iconRightsvgXmlnshttpwwww3Org2000SvgWidth21Height21ViewBox002121GFillnoneFillRuleevenoddStrokecurrentColorStrokeLinecaproundStrokeLinejoinroundcircleCx85Cy85R5PathDm17571175L1212GsvgwithIcons_withPrefixIcon]:
                hasVariant($state, "withIcons", "withPrefixIcon")
            }
          )}
          role={"img"}
        />

        {renderPlasmicSlot({
          defaultContents: "Store",
          value: args.text,
          className: classNames(sty.slotTargetText, {
            [sty.slotTargetTextbold]: hasVariant($state, "bold", "bold"),
            [sty.slotTargetTextrounded]: hasVariant(
              $state,
              "rounded",
              "rounded"
            ),
            [sty.slotTargetTextsize_large]: hasVariant($state, "size", "large"),
            [sty.slotTargetTextsize_small]: hasVariant($state, "size", "small"),
            [sty.slotTargetTexttype_link_size_large]:
              hasVariant($state, "type", "link") &&
              hasVariant($state, "size", "large")
          })
        })}
        {(hasVariant($state, "withIcons", "withSuffixIcon") ? true : false)
          ? renderPlasmicSlot({
              defaultContents: (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__pt0Y)}
                  role={"img"}
                />
              ),

              value: args.iconLeft,
              className: classNames(sty.slotTargetIconLeft, {
                [sty.slotTargetIconLefttype_link_size_large]:
                  hasVariant($state, "type", "link") &&
                  hasVariant($state, "size", "large"),
                [sty.slotTargetIconLeftwithIcons_withSuffixIcon]: hasVariant(
                  $state,
                  "withIcons",
                  "withSuffixIcon"
                )
              })
            })
          : null}
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "iconRightsvgXmlnshttpwwww3Org2000SvgWidth21Height21ViewBox002121GFillnoneFillRuleevenoddStrokecurrentColorStrokeLinecaproundStrokeLinejoinroundcircleCx85Cy85R5PathDM17571175L1212Gsvg"
  ],
  freeBox: [
    "freeBox",
    "iconRightsvgXmlnshttpwwww3Org2000SvgWidth21Height21ViewBox002121GFillnoneFillRuleevenoddStrokecurrentColorStrokeLinecaproundStrokeLinejoinroundcircleCx85Cy85R5PathDM17571175L1212Gsvg"
  ],
  iconRightsvgXmlnshttpwwww3Org2000SvgWidth21Height21ViewBox002121GFillnoneFillRuleevenoddStrokecurrentColorStrokeLinecaproundStrokeLinejoinroundcircleCx85Cy85R5PathDM17571175L1212Gsvg:
    [
      "iconRightsvgXmlnshttpwwww3Org2000SvgWidth21Height21ViewBox002121GFillnoneFillRuleevenoddStrokecurrentColorStrokeLinecaproundStrokeLinejoinroundcircleCx85Cy85R5PathDM17571175L1212Gsvg"
    ]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  iconRightsvgXmlnshttpwwww3Org2000SvgWidth21Height21ViewBox002121GFillnoneFillRuleevenoddStrokecurrentColorStrokeLinecaproundStrokeLinejoinroundcircleCx85Cy85R5PathDM17571175L1212Gsvg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButton__VariantsArgs;
    args?: PlasmicButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicButton__ArgProps,
          internalVariantPropNames: PlasmicButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    iconRightsvgXmlnshttpwwww3Org2000SvgWidth21Height21ViewBox002121GFillnoneFillRuleevenoddStrokecurrentColorStrokeLinecaproundStrokeLinejoinroundcircleCx85Cy85R5PathDM17571175L1212Gsvg:
      makeNodeComponent(
        "iconRightsvgXmlnshttpwwww3Org2000SvgWidth21Height21ViewBox002121GFillnoneFillRuleevenoddStrokecurrentColorStrokeLinecaproundStrokeLinejoinroundcircleCx85Cy85R5PathDM17571175L1212Gsvg"
      ),

    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps
  }
);

export default PlasmicButton;
/* prettier-ignore-end */
