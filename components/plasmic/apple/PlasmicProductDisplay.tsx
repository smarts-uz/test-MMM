// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wtHXqYo4cHDw1QkkqeK42j
// Component: 3-SuxyB_th-Q

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: 3cOksGmh6ZLL/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: wtHXqYo4cHDw1QkkqeK42j/projectcss
import sty from "./PlasmicProductDisplay.module.css"; // plasmic-import: 3-SuxyB_th-Q/css

import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: P3d05hsDJnpY/icon

createPlasmicElementProxy;

export type PlasmicProductDisplay__VariantMembers = {
  dark: "dark";
  reverse: "reverse";
  isMobileView: "isMobileView";
};
export type PlasmicProductDisplay__VariantsArgs = {
  dark?: SingleBooleanChoiceArg<"dark">;
  reverse?: SingleBooleanChoiceArg<"reverse">;
  isMobileView?: SingleBooleanChoiceArg<"isMobileView">;
};
type VariantPropType = keyof PlasmicProductDisplay__VariantsArgs;
export const PlasmicProductDisplay__VariantProps = new Array<VariantPropType>(
  "dark",
  "reverse",
  "isMobileView"
);

export type PlasmicProductDisplay__ArgsType = {
  title?: React.ReactNode;
  description?: React.ReactNode;
  links?: React.ReactNode;
  imageSrc?: React.ComponentProps<typeof PlasmicImg__>["src"];
  imageSmallSrc?: React.ComponentProps<typeof PlasmicImg__>["src"];
};
type ArgPropType = keyof PlasmicProductDisplay__ArgsType;
export const PlasmicProductDisplay__ArgProps = new Array<ArgPropType>(
  "title",
  "description",
  "links",
  "imageSrc",
  "imageSmallSrc"
);

export type PlasmicProductDisplay__OverridesType = {
  root?: Flex__<"section">;
  h2?: Flex__<"h2">;
  h3?: Flex__<"h3">;
};

export interface DefaultProductDisplayProps {
  title?: React.ReactNode;
  description?: React.ReactNode;
  links?: React.ReactNode;
  imageSrc?: React.ComponentProps<typeof PlasmicImg__>["src"];
  imageSmallSrc?: React.ComponentProps<typeof PlasmicImg__>["src"];
  dark?: SingleBooleanChoiceArg<"dark">;
  reverse?: SingleBooleanChoiceArg<"reverse">;
  isMobileView?: SingleBooleanChoiceArg<"isMobileView">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductDisplay__RenderFunc(props: {
  variants: PlasmicProductDisplay__VariantsArgs;
  args: PlasmicProductDisplay__ArgsType;
  overrides: PlasmicProductDisplay__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dark",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.dark
      },
      {
        path: "reverse",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.reverse
      },
      {
        path: "isMobileView",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isMobileView
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootdark]: hasVariant($state, "dark", "dark"),
          [sty.rootisMobileView]: hasVariant(
            $state,
            "isMobileView",
            "isMobileView"
          ),
          [sty.rootreverse]: hasVariant($state, "reverse", "reverse")
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__trJkj)}>
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__uylsz, {
            [sty.imgdark__uylsztRVoz]: hasVariant($state, "dark", "dark"),
            [sty.imgisMobileView__uylszV1891]: hasVariant(
              $state,
              "isMobileView",
              "isMobileView"
            )
          })}
          displayHeight={"100%"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={args.imageSrc}
        />

        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__yF9R, {
            [sty.imgisMobileView__yF9Rv1891]: hasVariant(
              $state,
              "isMobileView",
              "isMobileView"
            )
          })}
          displayHeight={"100%"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={args.imageSmallSrc}
        />
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__im65, {
          [sty.freeBoxreverse__im65IWz3L]: hasVariant(
            $state,
            "reverse",
            "reverse"
          )
        })}
      >
        <h2
          data-plasmic-name={"h2"}
          data-plasmic-override={overrides.h2}
          className={classNames(projectcss.all, projectcss.h2, sty.h2, {
            [sty.h2dark]: hasVariant($state, "dark", "dark")
          })}
        >
          {renderPlasmicSlot({
            defaultContents: 'Macbook Air 15"',
            value: args.title,
            className: classNames(sty.slotTargetTitle, {
              [sty.slotTargetTitledark]: hasVariant($state, "dark", "dark")
            })
          })}
        </h2>
        <h3
          data-plasmic-name={"h3"}
          data-plasmic-override={overrides.h3}
          className={classNames(projectcss.all, projectcss.h3, sty.h3, {
            [sty.h3dark]: hasVariant($state, "dark", "dark")
          })}
        >
          {renderPlasmicSlot({
            defaultContents: "Impressively big. Impossibly thin.",
            value: args.description,
            className: classNames(sty.slotTargetDescription, {
              [sty.slotTargetDescriptiondark]: hasVariant(
                $state,
                "dark",
                "dark"
              )
            })
          })}
        </h3>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__apg8E, {
            [sty.freeBoxdark__apg8EtRVoz]: hasVariant($state, "dark", "dark")
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <Button
                  className={classNames("__wab_instance", sty.button__fouvc)}
                  iconLeft={
                    <Icon6Icon
                      className={classNames(projectcss.all, sty.svg__ivSrr)}
                      role={"img"}
                    />
                  }
                  size={"large"}
                  text={"Learn More"}
                  type={"link"}
                  withIcons={["withSuffixIcon"]}
                />

                <Button
                  className={classNames("__wab_instance", sty.button__e9HaQ)}
                  iconLeft={
                    <Icon6Icon
                      className={classNames(projectcss.all, sty.svg__xNy41)}
                      role={"img"}
                    />
                  }
                  size={"large"}
                  text={"Buy"}
                  type={"link"}
                  withIcons={["withSuffixIcon"]}
                />
              </React.Fragment>
            ),
            value: args.links
          })}
        </Stack__>
      </Stack__>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h2", "h3"],
  h2: ["h2"],
  h3: ["h3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  h2: "h2";
  h3: "h3";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductDisplay__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductDisplay__VariantsArgs;
    args?: PlasmicProductDisplay__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductDisplay__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductDisplay__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductDisplay__ArgProps,
          internalVariantPropNames: PlasmicProductDisplay__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductDisplay__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductDisplay";
  } else {
    func.displayName = `PlasmicProductDisplay.${nodeName}`;
  }
  return func;
}

export const PlasmicProductDisplay = Object.assign(
  // Top-level PlasmicProductDisplay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    h3: makeNodeComponent("h3"),

    // Metadata about props expected for PlasmicProductDisplay
    internalVariantProps: PlasmicProductDisplay__VariantProps,
    internalArgProps: PlasmicProductDisplay__ArgProps
  }
);

export default PlasmicProductDisplay;
/* prettier-ignore-end */
